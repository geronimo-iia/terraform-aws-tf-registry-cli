{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#aws-terraform-registry-cli","title":"aws-terraform-registry-cli","text":"<p>Versions following Semantic Versioning</p>"},{"location":"#overview","title":"Overview","text":"<p>This project create a python client which work with AWS Terraform Private Registry.</p> <p>Features:</p> <ul> <li>Show client configuration (for debug purpose)</li> <li>Authentication:<ul> <li>JWT Token generation</li> <li>.terraformrc generation to configure Devops workstation</li> </ul> </li> <li>Terraform module publication from external storage (like a githb module release)</li> <li>Terraform module release (more detail on it below) to store every module inside default bucket of the AWS Terraform Private Registry..</li> </ul> <p>See documentation.</p> <p>The AWS Terraform Private Registry follow this Architectural design:</p> <p></p>"},{"location":"#installation","title":"Installation","text":"<p>Install this library directly into an activated virtual environment:</p> <pre><code>$ python3 -m pip install aws_terraform_registry\n</code></pre>"},{"location":"#configuration","title":"Configuration","text":"<p>We have to provide few informations to this client :</p> Name Description secret_key_name AWS Secret manager name where JWT Secret is stored repository_url HTTPS endpoint of the registry dynamodb_table_name AWS dynamodb table name bucket_name bucket name default_namespace default namespace to publish terraform module (\"devops\" per default) <p>All this information can come from several way (choose the rigth for you):</p> <ul> <li>from a yaml configuration file </li> <li>from environment variable</li> </ul> <p>Yaml configuration can be overriden with environment variable.</p>"},{"location":"#yaml-configuration","title":"YAML configuration","text":"<p>The default file name is <code>terraform_registry.yaml</code>, you can override this with <code>TFR_CONFIG_FILE</code> environmentt variable.</p> <p>To find thie configuratin file, directories will be lookup in this order:</p> <ul> <li>user home directory</li> <li>command line directory</li> <li><code>/etc/tfr</code> </li> </ul>"},{"location":"#environment-variable","title":"Environment variable","text":"Name Enviromnent variable name secret_key_name TFR_SECRET_KEY_NAME repository_url TFR_REPOSITORY_URL dynamodb_table_name TFR_DYNAMODB_TABLE_NAME bucket_name TFR_BUCKET_NAME default_namespace TFR_DEFAULT_NAMESPACE <p>All environment variable can be set with <code>.env</code> file inside your command line directory.</p>"},{"location":"#usage","title":"Usage","text":"<pre><code>&gt; tfr\nusage: tfr [-h] {config,generate-token,generate-terraformrc,publish,release} ...\n\nManage terraform registry\n\npositional arguments:\n  {config,generate-token,generate-terraformrc,release,unpublish,publish}\n                        commands\n    config              Show configuration parameters\n    generate-token      Generate an access token\n    generate-terraformrc\n                        Generate terraformrc configuration file\n    release             Release a terraform module from custom source.\n    publish             Publish a terraform module from custom source.\n    unpublish           Unpublish a terraform module (Keep archive on s3).\n\noptional arguments:\n  -h, --help            show this help message and exit\n  ```\n\n### Configuration\n\nYou can print what the python client use as configuration with the command :\n\n`tfr config`\n\nExample with an empty configuration:\n\n```bash\nbucket_name: null\ndefault_namespace: devops\ndynamodb_table_name: null\nrepository_url: null\nsecret_key_name: null\n</code></pre>"},{"location":"#authentication","title":"Authentication","text":""},{"location":"#obtain-a-jwt-token","title":"Obtain a JWT token","text":"<p>Command :</p> <pre><code>usage: tfr generate-token [-h] [-weeks WEEKS]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -weeks WEEKS, --weeks WEEKS\n                        #weeks of validity (52 per default)\n</code></pre>"},{"location":"#configure-terraform-with-your-private-registry","title":"Configure terraform with your private registry","text":"<p>Users must create <code>.terraformrc</code> file in their $HOME directory, with this content:</p> <pre><code>credentials \"registry.my-domain.com\" {\n    token = \"Mytoken\"\n}\n</code></pre> <p>Command :</p> <pre><code>usage: tfr generate-terraformrc [-h] -output-directory OUTPUT_DIRECTORY [-weeks WEEKS]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -output-directory OUTPUT_DIRECTORY, --output-directory OUTPUT_DIRECTORY\n                        output directory\n  -weeks WEEKS, --weeks WEEKS\n                        #weeks of validity (52 per default)\n\n</code></pre>"},{"location":"#terraform-publication","title":"Terraform &amp; Publication","text":"<p>You have two way to publish a module, using:</p> <ul> <li><code>publish</code></li> <li><code>release</code></li> </ul> <p>What's the difference ?</p> <p><code>publish</code>: register the source module as is in the aws private terraform regstry. You could have access issue if this url is not public.</p> <p><code>release</code>: </p> <ul> <li>store the source into the dedicated bucket of aws private terraform regstry. The access is managed within registry.</li> <li>archive (targ.gz) if the source is a folder</li> <li>download the source if it's an http url</li> <li>As your module will be stored within registry bucket, terraform client will use s3 signed url</li> </ul> <p>We use <code>release</code> from our ci/cd pipeline and <code>publish</code> only when we have to do something like 'quick and dirty' ... (It never happen, I swear !)</p>"},{"location":"#release-command","title":"Release command","text":"<pre><code>usage: tfr release [-h] [-namespace NAMESPACE] -name NAME -system SYSTEM -version VERSION -source SOURCE\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -namespace NAMESPACE, --namespace NAMESPACE\n                        module namespace\n  -name NAME, --name NAME\n                        module name\n  -system SYSTEM, --system SYSTEM\n                        module system (aws, ...)\n  -version VERSION, --version VERSION\n                        module version\n  -source SOURCE, --source SOURCE\n                        module source\n</code></pre>"},{"location":"#unpublish-command","title":"Unpublish command","text":"<pre><code>usage: tfr unpublish [-h] [-namespace NAMESPACE] -name NAME -system SYSTEM -version VERSION -source SOURCE\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -namespace NAMESPACE, --namespace NAMESPACE\n                        module namespace\n  -name NAME, --name NAME\n                        module name\n  -system SYSTEM, --system SYSTEM\n                        module system (aws, ...)\n  -version VERSION, --version VERSION\n                        module version\n</code></pre>"},{"location":"#publish-command","title":"Publish command","text":"<pre><code>usage: tfr publish [-h] [-namespace NAMESPACE] -name NAME -system SYSTEM -version VERSION -source SOURCE\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -namespace NAMESPACE, --namespace NAMESPACE\n                        module namespace\n  -name NAME, --name NAME\n                        module name\n  -system SYSTEM, --system SYSTEM\n                        module system (aws, ...)\n  -version VERSION, --version VERSION\n                        module version\n  -source SOURCE, --source SOURCE\n                        module source\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#change-log","title":"Change Log","text":""},{"location":"changelog/#115","title":"1.1.5","text":"<p>Security Fix:</p> <ul> <li>inja vulnerable to HTML attribute injection when passing user input as keys to xmlattr filter</li> </ul> <p>Build System:</p> <ul> <li>update poetry declaration</li> <li>use poe plugin (simplify makefile)</li> <li>use pyright for analysis (remove mypi)</li> </ul>"},{"location":"changelog/#114","title":"1.1.4","text":"<p>Build System:</p> <ul> <li>update dependabot pipeline</li> <li>update security dependencies</li> </ul>"},{"location":"changelog/#113","title":"1.1.3","text":"<p>Bug Fix:</p> <ul> <li>bad docs on installation</li> </ul>"},{"location":"changelog/#112","title":"1.1.2","text":"<p>Bug Fix:</p> <ul> <li>registry name when generate .terraformrc </li> </ul>"},{"location":"changelog/#111-2023-10-07","title":"1.1.1 (2023-10-07)","text":"<p>Security fix (dev tools):</p> <ul> <li>Removal of e-Tugra root certificate</li> <li><code>Cookie</code> HTTP header isn't stripped on cross-origin redirects</li> </ul>"},{"location":"changelog/#110-2023-06-27","title":"1.1.0 (2023-06-27)","text":"<p>Feat:</p> <ul> <li>Check if module ever exists before publishing or release.</li> <li>Add 'unpublish' command</li> </ul> <p>Test:</p> <ul> <li>Add blob api experimental api to expose released terraform module into dedicated bucket.</li> </ul>"},{"location":"changelog/#100-2023-06-21","title":"1.0.0 (2023-06-21)","text":"<p>Feat:</p> <ul> <li>Generate project structure from geronimo-iia/python-module-template</li> <li>Check github action</li> <li>Add ApplicationConfiguration and load from yaml files, environment variable</li> <li>Add client utility and parser</li> <li>Add token management command</li> <li>add publish command</li> <li>add release command</li> <li>initiate documentation site</li> <li>add user documentation and usage into readme</li> <li>add basic test unit</li> </ul>"},{"location":"code_of_conduct/","title":"Code of conduct","text":""},{"location":"code_of_conduct/#contributor-covenant-code-of-conduct","title":"Contributor Covenant Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or  advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic  address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a  professional setting</li> </ul>"},{"location":"code_of_conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at jguibert@gmail.com. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p> <p>For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contributing","title":"Contributing","text":"<p>This project is based on Geronimo-iaa's Python Module Template. This is a cookiecutter template for a typical Python library following modern packaging conventions.  It utilizes popular libraries to fully automate all development and deployment tasks.</p>"},{"location":"contributing/#setup","title":"Setup","text":""},{"location":"contributing/#requirements","title":"Requirements","text":"<p>You will need:</p> <ul> <li>Python 3.8\"+</li> <li>Pyenv</li> <li>poetry</li> <li>Make</li> </ul>"},{"location":"contributing/#make-installation","title":"Make Installation","text":"<p>A powerfull tool: * macOS: <code>$ xcode-select --install</code> * Linux: https://www.gnu.org/software/make * Windows: https://mingw.org/download/installer</p>"},{"location":"contributing/#pyenv-installation","title":"Pyenv Installation","text":"<p>Pyenv will manage all our python version. Follow https://github.com/pyenv/pyenv#installation</p>"},{"location":"contributing/#python-installation","title":"Python Installation","text":"<p><code>$ pyenv install 3.8</code></p>"},{"location":"contributing/#poetry-installation-httpspoetryeustaceiodocsinstallation","title":"Poetry Installation: https://poetry.eustace.io/docs/#installation","text":"<p>Poetry will manage our dependencies and create our virtual environment for us.</p>"},{"location":"contributing/#make-target-list","title":"Make Target list","text":"Name Comment make install Install project dependencies make configure Configure poetry make tag Create and push a tag based on current project version. This will launch github release action. make next-patch-version Increment patch version of the project."},{"location":"contributing/#poe-target-list","title":"Poe Target list","text":"Name Comment poetry poe check Run linters and static analysis poetry poe test Run unit tests poetry poe build Builds the source and wheels archives (and run check &amp; test target) poetry poe publish Publishes the package, previously built with the build command, to the remote repository poetry poe docs Builds  site documentation. poetry poe docs-publish Build and publish site documentation. poetry poe clean Delete all generated and temporary files poetry poe requirements Generate requirements.txt <p>You could retrieve those commands with <code>poetry poe</code>. It will output something like this :</p> <pre><code>Poe the Poet - A task runner that works well with poetry.\nversion 0.25.0\n\nResult: No task specified.\n\nUSAGE\n  poetry poe [-h] [-v | -q] [--root PATH] [--ansi | --no-ansi] task [task arguments]\n\nGLOBAL OPTIONS\n  -h, --help     Show this help page and exit\n  --version      Print the version and exit\n  -v, --verbose  Increase command output (repeatable)\n  -q, --quiet    Decrease command output (repeatable)\n  -d, --dry-run  Print the task contents but don't actually run it\n  --root PATH    Specify where to find the pyproject.toml\n  --ansi         Force enable ANSI output\n  --no-ansi      Force disable ANSI output\n\nCONFIGURED TASKS\n  build          Build module\n  publish        Publish module\n  check          Run Linter\n  test           Run unit tests\n  docs           Build site documentation\n  docs-publish   Publish site documentation\n  clean          Remove all generated and temporary files\n  requirements   Generate requirements.txt\n</code></pre>"},{"location":"license/","title":"License","text":""},{"location":"license/#license","title":"License","text":"<p>The MIT License (MIT)</p> <p>Copyright \u00a9 2023, Jerome Guibert</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"reference/","title":"Reference","text":"<p>This part of the project documentation focuses on an information-oriented approach. Use it as a reference for the technical implementation of the <code>aws_terraform_registry</code> project code.</p>"},{"location":"reference/#aws_terraform_registry.ApplicationConfig","title":"<code>ApplicationConfig</code>  <code>dataclass</code>","text":"<p>Define aws terraform private registry parameters.</p> <p>Attributes:</p> <pre><code>secret_key_name (str): AWS Secret manager name where JWT Secret is stored\nrepository_url (str): HTTPS endpoint of the registry\ndynamodb_table_name (str): dynamodb table name\nbucket_name (str): bucket name\ndefault_namespace: default namespace to publish terrafor module (\"devops\" per default)\n</code></pre> Source code in <code>aws_terraform_registry/config.py</code> <pre><code>@envclass\n@dataclass\nclass ApplicationConfig:\n    \"\"\"Define aws terraform private registry parameters.\n\n\n    Attributes:\n\n        secret_key_name (str): AWS Secret manager name where JWT Secret is stored\n        repository_url (str): HTTPS endpoint of the registry\n        dynamodb_table_name (str): dynamodb table name\n        bucket_name (str): bucket name\n        default_namespace: default namespace to publish terrafor module (\"devops\" per default)\n    \"\"\"\n\n    secret_key_name: Optional[str] = None\n    repository_url: Optional[str] = None\n    dynamodb_table_name: Optional[str] = None\n    bucket_name: Optional[str] = None\n    default_namespace: str = \"devops\"\n\n    def __post_init__(self):\n        \"\"\"Finalize configuration.\n\n        Feed attributs from TFR_xxxx env variable if exists.\n        \"\"\"\n        # Feed from env var\n        load_env(self, prefix='tfr')\n\n        # remove ending '/'\n        if self.repository_url and self.repository_url.endswith('/'):\n            self.repository_url = self.repository_url[0:-2]\n\n    def validate(self):\n        \"\"\"Validate each attributs.\n\n        Raise:\n            (RuntimeError): if an attribut is empty\n\n        \"\"\"\n        for name in ['secret_key_name', 'repository_url', 'dynamodb_table_name', 'bucket_name', 'default_namespace']:\n            if not getattr(self, name):\n                logger.error(f\"Configuration ERROR: '{name}' parameter is missing\")\n                raise RuntimeError(f\"Configuration ERROR: '{name}' parameter is missing\")\n\n    def show(self):\n        yaml.safe_dump(asdict(self), sys.stdout)\n\n    @classmethod\n    def lookup(cls, config_file_name: Optional[str] = None) -&gt; 'ApplicationConfig':\n        # define config file name\n        config_file_name = config_file_name if config_file_name else os.environ.get('TFR_CONFIG_FILE', _CONFIG_NAME)\n\n        # lookup\n        for path in [Path.home(), Path.cwd(), Path('/etc/tfr')]:\n            config_path = path / config_file_name\n            if config_path.exists():\n                return ApplicationConfig.load_from(filename=config_path)\n\n        return ApplicationConfig()\n\n    @classmethod\n    def load_from(cls, filename: Union[Path, str]) -&gt; 'ApplicationConfig':\n        \"\"\"Load ApplicationConfig from a yaml file.\"\"\"\n        with open(filename) as f:\n            return cls(**yaml.safe_load(f.read()))\n</code></pre>"},{"location":"reference/#aws_terraform_registry.ApplicationConfig.__post_init__","title":"<code>__post_init__()</code>","text":"<p>Finalize configuration.</p> <p>Feed attributs from TFR_xxxx env variable if exists.</p> Source code in <code>aws_terraform_registry/config.py</code> <pre><code>def __post_init__(self):\n    \"\"\"Finalize configuration.\n\n    Feed attributs from TFR_xxxx env variable if exists.\n    \"\"\"\n    # Feed from env var\n    load_env(self, prefix='tfr')\n\n    # remove ending '/'\n    if self.repository_url and self.repository_url.endswith('/'):\n        self.repository_url = self.repository_url[0:-2]\n</code></pre>"},{"location":"reference/#aws_terraform_registry.ApplicationConfig.load_from","title":"<code>load_from(filename)</code>  <code>classmethod</code>","text":"<p>Load ApplicationConfig from a yaml file.</p> Source code in <code>aws_terraform_registry/config.py</code> <pre><code>@classmethod\ndef load_from(cls, filename: Union[Path, str]) -&gt; 'ApplicationConfig':\n    \"\"\"Load ApplicationConfig from a yaml file.\"\"\"\n    with open(filename) as f:\n        return cls(**yaml.safe_load(f.read()))\n</code></pre>"},{"location":"reference/#aws_terraform_registry.ApplicationConfig.validate","title":"<code>validate()</code>","text":"<p>Validate each attributs.</p> Raise <p>(RuntimeError): if an attribut is empty</p> Source code in <code>aws_terraform_registry/config.py</code> <pre><code>def validate(self):\n    \"\"\"Validate each attributs.\n\n    Raise:\n        (RuntimeError): if an attribut is empty\n\n    \"\"\"\n    for name in ['secret_key_name', 'repository_url', 'dynamodb_table_name', 'bucket_name', 'default_namespace']:\n        if not getattr(self, name):\n            logger.error(f\"Configuration ERROR: '{name}' parameter is missing\")\n            raise RuntimeError(f\"Configuration ERROR: '{name}' parameter is missing\")\n</code></pre>"},{"location":"reference/#aws_terraform_registry.TerraformModuleIdentifier","title":"<code>TerraformModuleIdentifier</code>  <code>dataclass</code>","text":"<p>Define a Terraform Module Identifier.</p> <p>Attributes:</p> <pre><code>namespace (str): is the name of a namespace, unique on a particular hostname,\n    that can contain one or more modules that are somehow related.\nname (str):  the module name\nsystem (str): the name of a remote system that the module is primarily written to target,\n    like aws or azurerm\n</code></pre> Source code in <code>aws_terraform_registry/common/model.py</code> <pre><code>@dataclass()\nclass TerraformModuleIdentifier:\n    \"\"\"Define a Terraform Module Identifier.\n\n    Attributes:\n\n        namespace (str): is the name of a namespace, unique on a particular hostname,\n            that can contain one or more modules that are somehow related.\n        name (str):  the module name\n        system (str): the name of a remote system that the module is primarily written to target,\n            like aws or azurerm\n    \"\"\"\n\n    namespace: str\n    name: str\n    system: str\n\n    @property\n    def module_id(self) -&gt; str:\n        return f\"{self.namespace}/{self.name}/{self.system}\".lower()\n\n    def get_bucket_key(self, version: str) -&gt; str:\n        \"\"\"Return bucket key.\"\"\"\n        return f\"{self.module_id}/{version}/{BUCKET_FILE_NAME}\"\n\n    def get_publish_url(self, bucket_name: str, version: str) -&gt; str:\n        \"\"\"Return s3 url.\"\"\"\n\n        region = _find_caller_region()\n        bucket_sub_name = f\"s3-{region}\" if region != \"us-east-1\" else \"s3\"\n        return \"/\".join(\n            [f\"s3::https://{bucket_name}.{bucket_sub_name}.amazonaws.com\", self.get_bucket_key(version=version)]\n        )\n\n    def get_blob_url(self, repository_url: str, version: str) -&gt; str:\n        \"\"\"Return registry url with blob api.\"\"\"\n        return \"/\".join([repository_url, \"blob\", self.get_bucket_key(version=version)])\n</code></pre>"},{"location":"reference/#aws_terraform_registry.TerraformModuleIdentifier.get_blob_url","title":"<code>get_blob_url(repository_url, version)</code>","text":"<p>Return registry url with blob api.</p> Source code in <code>aws_terraform_registry/common/model.py</code> <pre><code>def get_blob_url(self, repository_url: str, version: str) -&gt; str:\n    \"\"\"Return registry url with blob api.\"\"\"\n    return \"/\".join([repository_url, \"blob\", self.get_bucket_key(version=version)])\n</code></pre>"},{"location":"reference/#aws_terraform_registry.TerraformModuleIdentifier.get_bucket_key","title":"<code>get_bucket_key(version)</code>","text":"<p>Return bucket key.</p> Source code in <code>aws_terraform_registry/common/model.py</code> <pre><code>def get_bucket_key(self, version: str) -&gt; str:\n    \"\"\"Return bucket key.\"\"\"\n    return f\"{self.module_id}/{version}/{BUCKET_FILE_NAME}\"\n</code></pre>"},{"location":"reference/#aws_terraform_registry.TerraformModuleIdentifier.get_publish_url","title":"<code>get_publish_url(bucket_name, version)</code>","text":"<p>Return s3 url.</p> Source code in <code>aws_terraform_registry/common/model.py</code> <pre><code>def get_publish_url(self, bucket_name: str, version: str) -&gt; str:\n    \"\"\"Return s3 url.\"\"\"\n\n    region = _find_caller_region()\n    bucket_sub_name = f\"s3-{region}\" if region != \"us-east-1\" else \"s3\"\n    return \"/\".join(\n        [f\"s3::https://{bucket_name}.{bucket_sub_name}.amazonaws.com\", self.get_bucket_key(version=version)]\n    )\n</code></pre>"},{"location":"reference/#aws_terraform_registry.build_parser","title":"<code>build_parser(config)</code>","text":"<p>Build arguments parser.</p> Source code in <code>aws_terraform_registry/cli.py</code> <pre><code>def build_parser(config: ApplicationConfig):\n    \"\"\"Build arguments parser.\"\"\"\n    parser = argparse.ArgumentParser(prog=\"tfr\", description=\"Manage terraform registry\")\n    subparsers = parser.add_subparsers(help='commands')\n\n    for item in [\n        _define_config,\n        _define_generate,\n        _define_terraformrc,\n        _define_release,\n        _define_publish,\n        _define_unpublish,\n    ]:\n        item(subparsers, config)\n\n    return parser\n</code></pre>"},{"location":"reference/#aws_terraform_registry.generate_terraformrc","title":"<code>generate_terraformrc(config, output_directory, weeks=52)</code>","text":"<p>Generate terraform_rc file.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>ApplicationConfig</code> <p>application configuration.</p> required <code>output_directory</code> <code>str</code> <p>directory where to wrote the .terraform_rc.</p> required <code>weeks</code> <code>int</code> <p>weeks of validity (52 per default).</p> <code>52</code> Source code in <code>aws_terraform_registry/common/token.py</code> <pre><code>def generate_terraformrc(config: ApplicationConfig, output_directory: str, weeks: int = 52):\n    \"\"\"Generate terraform_rc file.\n\n    Args:\n        config (ApplicationConfig): application configuration.\n        output_directory (str): directory where to wrote the .terraform_rc.\n        weeks (int, optional): weeks of validity (52 per default).\n\n    \"\"\"\n    config.validate()\n    repository_url = str(config.repository_url)  # avoid mypi error: this could not be null\n    hostmane = repository_url[repository_url.index(\"://\") + 3 : len(repository_url)]\n    with open(os.path.join(output_directory, \".terraformrc\"), \"w\") as f:\n        f.write(\n            f\"\"\"\ncredentials \"{hostmane}\" {{\n    token = \"{generate_token(config=config, weeks=weeks)}\"\n}}\n\"\"\"\n        )\n</code></pre>"},{"location":"reference/#aws_terraform_registry.generate_token","title":"<code>generate_token(config, weeks=1)</code>","text":"<p>Generate a JWT tokecm.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>ApplicationConfig</code> <p>application configuration.</p> required <code>weeks</code> <code>int</code> <p>weeks of validity (1 per default).</p> <code>1</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>encoded jwt token</p> Source code in <code>aws_terraform_registry/common/token.py</code> <pre><code>def generate_token(config: ApplicationConfig, weeks: int = 1) -&gt; str:\n    \"\"\"Generate a JWT tokecm.\n\n    Args:\n        config (ApplicationConfig): application configuration.\n        weeks (int, optional): weeks of validity (1 per default).\n\n    Returns:\n        str: encoded jwt token\n    \"\"\"\n    config.validate()\n    token = get_secret(secret_key_name=config.secret_key_name)  # pyright: ignore[reportArgumentType]\n    return jwt.encode(\n        {\"exp\": datetime.datetime.now(tz=datetime.timezone.utc) + datetime.timedelta(weeks=weeks)},\n        token,\n        algorithm=\"HS256\",\n    )\n</code></pre>"},{"location":"reference/#aws_terraform_registry.publish_module","title":"<code>publish_module(config, terraform_module, version, source)</code>","text":"<p>Publish terraform module.</p> <p>Args:</p> <pre><code>config (ApplicationConfig): application configuration\nterraform_module (TerraformModuleIdentifier): module identifier\nversion (str): version to publish\nsource (str): module source\n</code></pre> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>source</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>if specified version and module is ever published.</p> Source code in <code>aws_terraform_registry/common/publish.py</code> <pre><code>def publish_module(\n    config: ApplicationConfig, terraform_module: TerraformModuleIdentifier, version: str, source: str\n) -&gt; str:\n    \"\"\"Publish terraform module.\n\n    Args:\n\n        config (ApplicationConfig): application configuration\n        terraform_module (TerraformModuleIdentifier): module identifier\n        version (str): version to publish\n        source (str): module source\n\n    Returns:\n        str: source\n\n    Raises:\n        (RuntimeError): if specified version and module is ever published.\n    \"\"\"\n    config.validate()\n\n    if exists(config=config, terraform_module=terraform_module, version=version):\n        msg = f\"Version {version} for module {terraform_module.module_id} ever exist\"\n        logger.error(msg)\n        raise RuntimeError(msg)\n\n    client('dynamodb').put_item(\n        TableName=config.dynamodb_table_name,\n        Item={\n            \"Id\": {\"S\": terraform_module.module_id},\n            \"Version\": {\"S\": version},\n            \"Source\": {\"S\": source},\n        },\n    )\n    logger.info(f\"Published module {terraform_module.module_id}, Version {version}, Source {source}\")\n    return source\n</code></pre>"},{"location":"reference/#aws_terraform_registry.release_module","title":"<code>release_module(config, terraform_module, version, source)</code>","text":"<p>Release a terraform module.</p> <p>Source could be:</p> <ul> <li>a local folder (In this case local folder will be targzified).</li> <li>an url which point to a targzified archive (like a git release)</li> </ul> <p>This source will be send to the default bucket and publish onto the registry.</p> <p>Args:</p> <pre><code>config (ApplicationConfig): application configuration\nterraform_module (TerraformModuleIdentifier): module identifier\nversion (str): version to publish\nsource (str): module source\n</code></pre> Raise <p>(RuntimeError): if source did not exists or if specified version and module is ever published.</p> Source code in <code>aws_terraform_registry/common/release.py</code> <pre><code>def release_module(\n    config: ApplicationConfig, terraform_module: TerraformModuleIdentifier, version: str, source: str\n) -&gt; str:\n    \"\"\"Release a terraform module.\n\n    Source could be:\n\n    - a local folder (In this case local folder will be targzified).\n    - an url which point to a targzified archive (like a git release)\n\n    This source will be send to the default bucket and publish onto the registry.\n\n    Args:\n\n        config (ApplicationConfig): application configuration\n        terraform_module (TerraformModuleIdentifier): module identifier\n        version (str): version to publish\n        source (str): module source\n\n    Raise:\n        (RuntimeError): if source did not exists or if specified version and module is ever published.\n    \"\"\"\n    config.validate()\n    # remove the v\n    version = version if not version.lower().startswith(\"v\") else version[1:]\n\n    if exists(config=config, terraform_module=terraform_module, version=version):\n        msg = f\"Version {version} for module {terraform_module.module_id} ever exist\"\n        logger.error(msg)\n        raise RuntimeError(msg)\n\n    s3_key = terraform_module.get_bucket_key(version=version)\n    logger.debug(f\"Put module archive to {s3_key}\")\n\n    if source.lower().startswith(\"http\"):\n        send_s3_from_url(config=config, source_url=source, s3_key=s3_key)\n    else:\n        _source = Path(source)\n        if not _source.exists():\n            raise RuntimeError(f\"Source {source} did not exists \")\n        if _source.is_file():\n            send_s3_from_file(config=config, archive_file=_source, s3_key=s3_key)\n\n        send_s3_from_dir(config=config, archive_dir=_source, s3_key=s3_key)\n\n    publish_url = terraform_module.get_publish_url(\n        bucket_name=config.bucket_name, version=version  # pyright: ignore[reportArgumentType]\n    )\n    # experimental API\n    # publish_url = terraform_module.get_blob_url(repository_url=config.repository_url, version=version)\n    logger.debug(f\"url: {publish_url}\")\n    publish_module(config=config, terraform_module=terraform_module, version=version, source=publish_url)\n\n    return publish_url\n</code></pre>"},{"location":"reference/#aws_terraform_registry.unpublish_module","title":"<code>unpublish_module(config, terraform_module, version)</code>","text":"<p>UnPublish terraform module.</p> <p>Args:</p> <pre><code>config (ApplicationConfig): application configuration\nterraform_module (TerraformModuleIdentifier): module identifier\nversion (str): version to publish\n</code></pre> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>if specified version and module did not exists.</p> Source code in <code>aws_terraform_registry/common/publish.py</code> <pre><code>def unpublish_module(config: ApplicationConfig, terraform_module: TerraformModuleIdentifier, version: str):\n    \"\"\"UnPublish terraform module.\n\n    Args:\n\n        config (ApplicationConfig): application configuration\n        terraform_module (TerraformModuleIdentifier): module identifier\n        version (str): version to publish\n\n\n    Raises:\n        (RuntimeError): if specified version and module did not exists.\n    \"\"\"\n    config.validate()\n\n    if not exists(config=config, terraform_module=terraform_module, version=version):\n        msg = f\"Version {version} for module {terraform_module.module_id} did not exist\"\n        logger.error(msg)\n        raise RuntimeError(msg)\n\n    client('dynamodb').delete_item(\n        TableName=config.dynamodb_table_name,\n        Key={\n            \"Id\": {\"S\": terraform_module.module_id},\n            \"Version\": {\"S\": version},\n        },\n    )\n    logger.info(f\"Unpublished module {terraform_module.module_id}, Version {version}\")\n</code></pre>"}]}